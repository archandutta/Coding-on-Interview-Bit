int* maxset(int* A, int n1, int *length_of_array) {
      
      *length_of_array=0;    
      long int sum=0,i=0,j,temp=0,s=0,l=0,flag=1,h,len=n1,c=0;
      for(i=0;i<len;i++)
      {
          if(A[i]<0)
           c++;
      }
      if(c==len)
        return;
        
      for(i=0;i<len;i++)
      {
          if(flag==1)
          {
              h=i;
              flag=0;
          }
          if(A[i]>=0)
          {   
              temp=temp+(long int)A[i];
          }
          else
          {
              if(temp>sum)
              {
                    sum=temp;
                    l=i-1;
                    s=h;
                    
              }
              if(temp==sum)
              {
                 if(l-s<(i-1)-h)
                 {
                   l=i-1;
                   s=h;
                 }
              }
              flag=1; 
              temp=0;
          }
         
      }
      if(temp>sum)
      {
            sum=temp;
            l=i-1;
            s=h;
      }
     
      if(s!=0 || A[0]>=0)
      {
          *length_of_array=(int)l-s+1;
      }
      int * ret = (int *) malloc(sizeof(int) * *length_of_array);
      for(i=0,j=s;i<(long int)(*length_of_array);i++,j++)
      {
          ret[i]=A[j];
      }
      return ret;
      
     
}
